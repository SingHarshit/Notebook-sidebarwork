{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 60, "column": 0}, "map": {"version":3,"sources":["file:///D:/Frames/Next%20JS/assignment/src/lib/mockData.ts"],"sourcesContent":["export const mockData: Record<string, any[]> = {\r\n  orders: [\r\n    { id: 1, customer: 'Alice', total: 200 },\r\n    { id: 2, customer: 'Bob', total: 450 },\r\n  ],\r\n  users: [\r\n    { id: 1, name: 'Charlie', email: 'charlie@example.com' },\r\n  ]\r\n};\r\n"],"names":[],"mappings":";;;AAAO,MAAM,WAAkC;IAC7C,QAAQ;QACN;YAAE,IAAI;YAAG,UAAU;YAAS,OAAO;QAAI;QACvC;YAAE,IAAI;YAAG,UAAU;YAAO,OAAO;QAAI;KACtC;IACD,OAAO;QACL;YAAE,IAAI;YAAG,MAAM;YAAW,OAAO;QAAsB;KACxD;AACH","debugId":null}},
    {"offset": {"line": 90, "column": 0}, "map": {"version":3,"sources":["file:///D:/Frames/Next%20JS/assignment/src/lib/queryRunner.ts"],"sourcesContent":["import { mockData } from './mockData';\r\n\r\nexport function runQuery(query: string) {\r\n  // Simple regex to extract table name after 'FROM'\r\n  const tableMatch = query.match(/FROM\\s+(\\w+)/i);\r\n\r\n  if (!tableMatch) {\r\n    console.warn('No table found in query:', query);\r\n    return [];\r\n  }\r\n\r\n  const table = tableMatch[1];\r\n\r\n  if (!mockData[table]) {\r\n    console.warn(`No data for table: ${table}`);\r\n    return [];\r\n  }\r\n\r\n  return mockData[table];\r\n}\r\n"],"names":[],"mappings":";;;AAAA;;AAEO,SAAS,SAAS,KAAa;IACpC,kDAAkD;IAClD,MAAM,aAAa,MAAM,KAAK,CAAC;IAE/B,IAAI,CAAC,YAAY;QACf,QAAQ,IAAI,CAAC,4BAA4B;QACzC,OAAO,EAAE;IACX;IAEA,MAAM,QAAQ,UAAU,CAAC,EAAE;IAE3B,IAAI,CAAC,wHAAA,CAAA,WAAQ,CAAC,MAAM,EAAE;QACpB,QAAQ,IAAI,CAAC,CAAC,mBAAmB,EAAE,OAAO;QAC1C,OAAO,EAAE;IACX;IAEA,OAAO,wHAAA,CAAA,WAAQ,CAAC,MAAM;AACxB","debugId":null}},
    {"offset": {"line": 115, "column": 0}, "map": {"version":3,"sources":["file:///D:/Frames/Next%20JS/assignment/src/app/api/runQuery/route.ts"],"sourcesContent":["import { NextResponse } from 'next/server';\r\nimport { runQuery } from '@/lib/queryRunner';\r\n\r\nexport async function POST(req: Request) {\r\n  await new Promise(resolve => setTimeout(resolve, 300)); // simulate latency\r\n\r\n  const body = await req.json();\r\n\r\n  if (!body.query || typeof body.query !== 'string') {\r\n    return NextResponse.json({ error: 'Invalid query' }, { status: 400 });\r\n  }\r\n\r\n  const data = runQuery(body.query);\r\n\r\n  return NextResponse.json({ data }, { status: 200 });\r\n}\r\n"],"names":[],"mappings":";;;AAAA;AACA;;;AAEO,eAAe,KAAK,GAAY;IACrC,MAAM,IAAI,QAAQ,CAAA,UAAW,WAAW,SAAS,OAAO,mBAAmB;IAE3E,MAAM,OAAO,MAAM,IAAI,IAAI;IAE3B,IAAI,CAAC,KAAK,KAAK,IAAI,OAAO,KAAK,KAAK,KAAK,UAAU;QACjD,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,OAAO;QAAgB,GAAG;YAAE,QAAQ;QAAI;IACrE;IAEA,MAAM,OAAO,CAAA,GAAA,2HAAA,CAAA,WAAQ,AAAD,EAAE,KAAK,KAAK;IAEhC,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;QAAE;IAAK,GAAG;QAAE,QAAQ;IAAI;AACnD","debugId":null}}]
}